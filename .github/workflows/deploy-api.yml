name: Deploy API to Google Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch:

env:
  PROJECT_ID: hantibink
  REGION: us-central1
  SERVICE_NAME: hantibink-api

jobs:
  deploy:
    name: Deploy API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker --quiet

      # Apply migrations BEFORE building the Docker image
      - name: Apply migrations (if AUTO_MIGRATE enabled)
        if: vars.AUTO_MIGRATE == 'true'
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.SUPABASE_DIRECT_URL }}
        run: |
          echo "üîÑ Applying migrations before build..."
          npm ci
          npx prisma generate
          npm run migrate:prod
          echo "‚úÖ Migrations applied"

      - name: Build Docker image
        working-directory: ./api
        run: |
          # Create optimized Dockerfile
          cat > Dockerfile.ci << 'EOF'
          FROM node:18-slim
          
          RUN apt-get update -y && apt-get install -y openssl && rm -rf /var/lib/apt/lists/*
          
          WORKDIR /app
          
          # Copy package.json and prisma schema
          COPY package.json ./
          COPY prisma ./prisma/
          
          # Install production dependencies
          RUN npm install --omit=dev
          
          # Generate Prisma client with current schema
          RUN npx prisma generate
          
          # Copy the rest of the application
          COPY . .
          
          EXPOSE 8080
          
          CMD ["npm", "start"]
          EOF
          
          # IMPORTANT: --no-cache ensures Prisma client is regenerated with latest database schema
          # This prevents issues where the API has an outdated Prisma client after migrations
          docker build --platform linux/amd64 --no-cache -f Dockerfile.ci -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,HOST=0.0.0.0,FIREBASE_PROJECT_ID=hantibink,DATABASE_URL=${{ secrets.SUPABASE_DATABASE_URL }},DIRECT_URL=${{ secrets.SUPABASE_DIRECT_URL }},JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --min-instances=0 \
            --max-instances=10 \
            --memory=512Mi

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "API deployed to: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Test deployment
        run: |
          curl -f ${{ env.SERVICE_URL }}/health || exit 1
          echo "Health check passed!"

      # Migration check - always runs but doesn't fail the build
      - name: Check for pending migrations
        id: migration-check
        continue-on-error: true
        working-directory: ./api
        run: |
          # Install dependencies first (needed for Prisma client)
          npm ci --omit=dev
          
          # Generate Prisma client
          npx prisma generate
          
          # Run the migration check
          DATABASE_URL="${{ secrets.SUPABASE_DATABASE_URL }}" \
          DIRECT_URL="${{ secrets.SUPABASE_DIRECT_URL }}" \
          node scripts/ci-migration-check.js | tee migration-output.txt
          
          # Extract status
          STATUS=$(grep "^STATUS=" migration-output.txt | cut -d= -f2)
          PENDING=$(grep "^PENDING_MIGRATIONS=" migration-output.txt | cut -d= -f2)
          
          echo "migration_status=$STATUS" >> $GITHUB_OUTPUT
          echo "pending_migrations=$PENDING" >> $GITHUB_OUTPUT
          
          # Show output in logs
          cat migration-output.txt
          rm migration-output.txt

      - name: Migration notification
        if: steps.migration-check.outputs.migration_status == 'PENDING' || steps.migration-check.outputs.migration_status == 'NO_TABLE'
        run: |
          echo "::warning title=Pending Database Migration::Database migrations required: ${{ steps.migration-check.outputs.pending_migrations }}"
          echo "## üìã Migration Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Pending migrations detected after deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Migrations needed:** ${{ steps.migration-check.outputs.pending_migrations }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### To apply migrations manually:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "cd api" >> $GITHUB_STEP_SUMMARY
          echo "npm run migrate:prod:status  # Check status" >> $GITHUB_STEP_SUMMARY
          echo "npm run migrate:prod         # Apply migrations" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### To enable auto-migration:" >> $GITHUB_STEP_SUMMARY
          echo "Add repository variable \`AUTO_MIGRATE=true\` in GitHub settings" >> $GITHUB_STEP_SUMMARY
          
      # Note: Auto-migration now happens BEFORE Docker build to ensure Prisma client is in sync

  # Separate job for migration status - shows as its own check
  migration-status:
    name: Migration Status
    runs-on: ubuntu-latest
    needs: deploy  # Run after deployment
    if: always()  # Run even if deployment fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./api
        run: npm ci --omit=dev

      - name: Generate Prisma client
        working-directory: ./api
        run: npx prisma generate

      - name: Check migration status
        working-directory: ./api
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.SUPABASE_DIRECT_URL }}
        run: |
          # Run check and capture exit code
          set +e
          node scripts/ci-migration-check.js
          EXIT_CODE=$?
          set -e
          
          # Display result
          if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Migration check completed successfully"
          else
            echo "‚ö†Ô∏è Migration check failed with exit code $EXIT_CODE"
            echo "Check the deployment job for migration details"
          fi
          
          # Always exit 0 since this is just for visibility
          exit 0